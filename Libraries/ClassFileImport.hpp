/*2015 Thomas Androxman
-------------------------------------------------------------------------------------------
This library handles:
-Reading of OBJ files (tested with OBJ files generated by Rhinoceros3D 5.0)
-Reading of image files (BMP24 and BMP32 supported), (PNG is started but not yet supported)
-------------------------------------------------------------------------------------------
*/
#pragma once
#include "ClassGeometry.hpp"   //for use of TypeGeometryRegistry and several c++ standard libraries
#include "ClassLinkedList.hpp"
#include <bitset>              //for use of bitset<8> to output binary
#include <climits>             //for use of CHAR_BIT and other limits
#include <cstdlib>             //for use of atof() (convert alphanumeric strings to float)
#include <fstream>             //file reading

//***CLASS OBJ Import***************************************************************************************
//**********************************************************************************************************
class TypeImageFile;
//----------------------------------------------------------------------------------------------------------

//Holds material info imported from OBJ files
struct TypeOBJMat
{
    string   Name="";
    TypeXYZ  Ka={0.5,0.5,0.5};      //specifies the ambient reflectivity
    TypeXYZ  Kd={0.3,0.3,0.3};      //Diffuse color
    TypeXYZ  Ks={1.0,1.0,1.0};      //specifies the specular reflectivity using RGB values
    TypeXYZ  Tf={0.0,0.0,0.0};      //Transmission filter (Tf 0 1 0 allows all the green to pass through and filters out  all the red and blue).
    double   d =1.0;                //Transparency (1.0 is opaque)
    int      Ns=0;                  //This defines the focus of the specular highlight. (range 0-1000)

    string   TextureFile="";

    TypeOBJMat (string MatName="") {Name=MatName;} //Constructor
    void Print (string Comment="");
};
//----------------------------------------------------------------------------------------------------------

//Holds data imported from OBJ files
struct TypeOBJData
{
    string                  Name;
    unsigned                FileVertIdx;
    TypeGeometryRegistry    CoreArr;
    vector<TypeXY >         VtArr;
    vector<TypeXYZ>         VnArr;

    //These arrays are in sync with the registry arrays index-for-index
    //link registry features with materials
    vector<unsigned>   MatForPoint;
    vector<unsigned>   MatForLine;
    vector<unsigned>   MatForPolyline;
    vector<unsigned>   MatForSurface;

    //Constructor
    TypeOBJData ()     {CoreArr.Coordinates.push_back({NAN,NAN,NAN});} //reserve the [0]th coordinate
};
//----------------------------------------------------------------------------------------------------------

//Reads OBJ files and interprets the data
class TypeOBJfile
{
private:
    //Core data
    vector <TypeOBJData  > Objects;
    vector <TypeOBJMat   > Materials;
    vector <TypeImageFile> Textures; //Objects point to materials and materials point to textures

    //State data
    array <bool,3>  vVtVnPattern;
    unsigned        LastMaterial;
    unsigned        VertexCount=0;          //Cumulative vertex count (all objects)

    //Methods
    void EnsureDefaultObject    ();
    void ResetData              ();
    int  GetMaterialIdx         (string lookupName);
    int  GetTextureIdx          (string lookupFileName);
    void LoadMaterialsFrom      (string ThisFile);
    void TokenizeString         (const string& ThisStr, vector<string>& result, char delim, int splits=-1);
    bool ExtractvVtVn           (const vector<string>& fromTokenList, unsigned ThisOne, array<float,3>& vVtVn);

    string CleanString          (string& ThisStr,char ignore='#');

public:
    //Misc methods
    bool LoadDataFrom           (string ThisFile);
    void PrintInventory         ();

    int  GetCountOfTexturedSrf  (unsigned ObjectIdx);

    //Get methods
    const vector <TypeOBJData  >& GetObjects   () {return Objects;}
    const vector <TypeOBJMat   >& GetMaterials () {return Materials;}
    const vector <TypeImageFile>& GetTextures  () {return Textures;}
};
//----------------------------------------------------------------------------------------------------------

//***CLASS IMAGE Import*************************************************************************************
//**********************************************************************************************************
struct TypeImageProperties
{
    string        FileName,ImageFormat;
    unsigned      width,height,PrintResW,PrintResH,ByteCount;
    unsigned char BitDepth,BytesPerPixel,ColorType,CompressionMethod,FilterMethod,InterlaceMethod;

    void Print        (const string& comment="") const;
};
//----------------------------------------------------------------------------------------------------------
//to load BMP, and later PNG (and other) files to memory
class TypeImageFile
{
private:
    //Data
    vector<unsigned char>           RawImageBytes;
    vector<unsigned char>           PixelArray;     //2D laid flat

    //Image description
    TypeImageProperties Properties;

    //Methods
    void     PrintBytes         (const vector<unsigned char>& theseBytes, const string& comment="", bool inHex=false, unsigned SoMany=0);
    bool     LoadDataFrom       (const string& ThisFile);
    bool     isMatch            (const vector<unsigned char>& master, unsigned fromIdx=0);
    unsigned BigEndian          (unsigned fromIdx,short bytes=4);
    unsigned LittleEndian       (unsigned fromIdx,short bytes=4);


public:
    //Methods
    bool LoadPNGimage           (const string& ThisFile);
    bool LoadBMPimage           (const string& ThisFile);
    void PrintPixelArray        (const string& comment="", bool inHex=false, unsigned SoMany=0) {PrintBytes(PixelArray,comment,inHex,SoMany);}

    const string&                GetFileName   () const {return Properties.FileName;}
    const TypeImageProperties&   GetProperties () const {return Properties;}
    const vector<unsigned char>& GetPixelArray () const {return PixelArray;}
};
//The rest of this
#include "ClassFileImport.cpp"
